/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Character.CharacterInfo;
import Message.ExchangeMessage;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import static java.lang.Thread.sleep;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.midi.Receiver;
import javax.swing.DefaultListModel;
import static java.lang.Thread.sleep;

/**
 *
 * @author Be Khanh Duy
 */
public class MainScreen extends javax.swing.JFrame {

    HashMap<CharacterInfo, ChatDialog> onlines = new HashMap<>();
    int voted;

    private void loadOnlineUser() {
        //lstUsers.setModel(null);
        DefaultListModel model = new DefaultListModel();
        for (Map.Entry<CharacterInfo, ChatDialog> entry : onlines.entrySet()) {
            CharacterInfo key = entry.getKey();
            model.addElement(key);
        }
        lstUsers.setModel(model);
    }

    private void addNewUsers(ArrayList<CharacterInfo> users) {
        for (CharacterInfo u : users) {
            boolean isExist = false;
            for (Map.Entry<CharacterInfo, ChatDialog> entry : onlines.entrySet()) {
                CharacterInfo key = entry.getKey();
                ChatDialog value = entry.getValue();
                if (key.getUsername().equals(u.getUsername())) {
                    isExist = true;
                    break;
                }
            }
            if (!isExist) {
                ChatDialog cd = new ChatDialog(this, false, u);
                cd.setVisible(false);
                cd.setTitle(user.getUsername() + " chat to " + u.getUsername());
                onlines.put(u, cd);
            }

        }

    }

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
        this.btnReady.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList();
        btnReady = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username");

        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        lstUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstUsers);

        btnReady.setText("Ready");
        btnReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConnect)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(btnReady)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnReady)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    Socket socket;
    CharacterInfo user;
    gameScreen gs;

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // TODO add your handling code here:
        try {
            user = new CharacterInfo(txtUserName.getText());
            byte[] ip = {(byte) 127, (byte) 0, (byte) 0, (byte) 1};
            InetAddress inet = InetAddress.getByAddress(ip);
            //btnConnect.setEnabled(false);
            socket = new Socket(inet, 9999);
            Receiver receiver = new Receiver() {
            };
            receiver.start();
            this.btnConnect.setVisible(false);
            this.txtUserName.setVisible(false);
            this.jLabel1.setVisible(false);
            this.btnReady.setVisible(true);

        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void lstUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstUsersMouseClicked
        // TODO add your handling code here:
        CharacterInfo receiver = (CharacterInfo) lstUsers.getSelectedValue();
        if (receiver == null) {
            return;
        }
        for (Map.Entry<CharacterInfo, ChatDialog> entry : onlines.entrySet()) {
            CharacterInfo key = entry.getKey();
            ChatDialog value = entry.getValue();
            if (receiver.equals(key.getUsername())) {
                value.setVisible(true);
                break;
            }
        }
    }//GEN-LAST:event_lstUsersMouseClicked

    private void btnReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadyActionPerformed
        // TODO add your handling code here:
        user.setReady(true);

        changeReadyStatus();
    }//GEN-LAST:event_btnReadyActionPerformed

    public void sendMessage(String content, CharacterInfo receiver) {
        try {
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            ExchangeMessage message = new ExchangeMessage();
            message.setContent(content);
            message.setReceiver(receiver);
            message.setSender(user);
            message.setCommand(ExchangeMessage.CLIENT_SEND_CHAT_MESSAGE);
            oos.writeObject(message);
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void changeReadyStatus() {
        try {
            ExchangeMessage message = new ExchangeMessage();
            message.setSender(user);
            message.setCommand(ExchangeMessage.CLIENT_SEND_READY_STATUS);
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void gameStart() {
        gs = new gameScreen(onlines, socket, user, this);
        this.setVisible(false);
        gs.setVisible(true);

    }

    public void sendTargetInfo(CharacterInfo target) {
        try {
            ExchangeMessage message = new ExchangeMessage();
            message.setTarget(target);
            System.out.println(target.getCharType());
            if (user.getCharType() == ExchangeMessage.WEREWOLF_TYPE) {
                message.setCommand(ExchangeMessage.WEREWOLF_SEND_VICTOM);
                message.setSender(user);
            } else if (user.getCharType() == ExchangeMessage.PROTETOR_TYPE) {
                message.setCommand(ExchangeMessage.PROTECTOR_SEND_TARGET);
                message.setSender(user);
            } else if (user.getCharType() == ExchangeMessage.SEER_TYPE) {
                message.setCommand(ExchangeMessage.SEER_SEND_TARGET);
                message.setSender(user);
            }

            System.out.println(target);
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            System.out.println("Target Sended");
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendVote(CharacterInfo target) {
        try {
            if (voted != 2) {
                ExchangeMessage message = new ExchangeMessage();
                message.setTarget(target);
                System.out.println(target.getCharType());
                message.setSender(user);
                message.setCommand(ExchangeMessage.CLIENT_SEND_VOTE);
                System.out.println(target + " is voted");
                OutputStream os = socket.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);
                oos.writeObject(message);
                System.out.println("Target Sended");
            }
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendWizardChoice(CharacterInfo target, boolean isProtected) {
        OutputStream os = null;
        try {
            ExchangeMessage message = new ExchangeMessage();
            message.setTarget(target);
            message.setIsProtected(isProtected);
            message.setCommand(ExchangeMessage.WIZARD_SEND_CHOICE_TO_SERVER);
            os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            System.out.println("Target Sended");
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void chatAll(String content) {
        try {
            ExchangeMessage message = new ExchangeMessage();
            message.setSender(user);
            message.setCommand(ExchangeMessage.CLIENT_SEND_ALL_CHAT);
            message.setContent(content);
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            System.out.println("Message sended");
        } catch (IOException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class Receiver extends Thread {

        public Receiver() {

        }

        @Override
        public void run() {

            try {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

                OutputStream os = socket.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);;

                ExchangeMessage registMessage = new ExchangeMessage();
                registMessage.setCommand(ExchangeMessage.CLIENT_SEND_INFO_TO_SERVER);
                registMessage.setSender(user);
                oos.writeObject(registMessage);
                while (true) {
                    InputStream is = socket.getInputStream();
                    ObjectInputStream ois = new ObjectInputStream(is);
                    ExchangeMessage message = (ExchangeMessage) ois.readObject();
                    switch (message.getCommand()) {
                        case ExchangeMessage.SERVER_SEND_ONLINE_USERS:
                            //display list online
                            addNewUsers(message.getUsers());
                            loadOnlineUser();
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_TO_CLIENT_NEWONLINE:
                            addNewUsers(message.getUsers());
                            loadOnlineUser();
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_TO_CLIENT_NEWMESSAGE:
                            CharacterInfo sender = message.getSender();

                            for (Map.Entry<CharacterInfo, ChatDialog> entry : onlines.entrySet()) {
                                CharacterInfo key = entry.getKey();
                                ChatDialog value = entry.getValue();
                                if (key.getUsername().equals(sender.getUsername())) {
                                    ChatDialog cd = value;
                                    cd.setVisible(true);
                                    cd.addTextToScreen(sender.getUsername() + ":" + message.getContent());
                                    break;
                                }
                            }
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_CHANGE_STATUS:
                            for (Map.Entry<CharacterInfo, ChatDialog> entry : onlines.entrySet()) {
                                CharacterInfo key = entry.getKey();
                                if (key.getUsername().equals(message.getSender().getUsername())) {
                                    entry.getKey().setReady(true);
                                }
                            }
                            loadOnlineUser();
                            System.out.println(user.getUsername() + user);
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_GAME_BEGIN:
                            int type = message.getCharType();
                            user.setCharType(type);

                            gameStart();
                            System.out.println("Your role is:" + type);
                            break;
                        case ExchangeMessage.SERVER_SEND_MESSAGE:
                            String content = message.getContent();
                            gs.setServerMessage(content);
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_WEREWOLF:
                            gs.setServerMessage(message.getContent());
                            gs.nightAwake();

                            break;
                        case ExchangeMessage.SERVER_NOTIFY_PROTECTOR:
                            gs.setServerMessage(message.getContent());
                            gs.nightAwake();

                            break;
                        case ExchangeMessage.SERVER_NOTIFY_SEER:
                            gs.setServerMessage(message.getContent());
                            gs.nightAwake();

                            break;
                        case ExchangeMessage.SERVER_SEND_CHECK_RESULT:
                            gs.setServerMessage(message.getContent());
                            break;
                        case ExchangeMessage.SERVER_SEND_VICTIM_TO_WIZARD:
                            gs.setServerMessage(message.getContent());
                            gs.nightAwake();
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_DAY_BEGIN:
                            voted = 0;
                            gs.setServerMessage(message.getContent());
                            gs.deleteDead(message.getTarget());
                            gs.deleteDead(message.getReceiver());
                            gs.dayAwake();
                            break;
                        case ExchangeMessage.SERVER_SEND_VOTE_SUCCESS:
                            voted++;
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_NIGHT_BEGIN:
                            gs.deleteDead(message.getTarget());
                            gs.nightAwake();
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_HUMAN_WIN:
                            gs.setServerMessage(message.getContent());
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_WOLF_WIN:
                            gs.setServerMessage(message.getContent());
                            break;
                        case ExchangeMessage.SERVER_NOTIFY_ALL_CHAT:
                            gs.setAllChat(message.getContent());
                            break;
                    }
                }
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnReady;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstUsers;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
